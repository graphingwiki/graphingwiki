From d1e5fc7d3708d877353ca64dd4aa7cfd1cde4cb4 Mon Sep 17 00:00:00 2001
From: Thomas Waldmann <tw@waldmann-edv.de>
Date: Mon, 26 Oct 2020 22:06:28 +0100
Subject: [PATCH] security: fix remote code execution via cache action,
 CVE-2020-25074

An attacker with "write" permissions can upload specifically made
malicious code via the normal wiki attachment upload functionality and
later execute it on the server (as the same uid/gid as the wiki server
process) by using the vulnerable MoinMoin cache action.
---
 MoinMoin/action/cache.py | 27 ++++++++++++++++++++-------
 1 file changed, 20 insertions(+), 7 deletions(-)

diff --git a/MoinMoin/action/cache.py b/MoinMoin/action/cache.py
index a38967e8..f0bb23ee 100644
--- a/MoinMoin/action/cache.py
+++ b/MoinMoin/action/cache.py
@@ -103,6 +103,29 @@ def key(request, wikiname=None, itemname=None, attachname=None, content=None, se
     return key
 
 
+def valid_key(key):
+    # make sure the key looks like keys generated by key()
+    if not isinstance(key, unicode):
+        # key is None (not given in url args) or something unexpected
+        return False
+    if '-' in key:
+        addon = ''
+        key = key.split('-')
+        if len(key) > 2:
+            return False
+        if len(key) == 2:
+            key, addon = key
+        if addon:
+            if not addon.isalpha():
+                return False
+    try:
+        int(key, 16)  # try to evaluate as hex number
+    except ValueError:
+        # was not a hex number
+        return False
+    return len(key) == 40  # hmac-sha1 hexdigest == 40 hex chars
+
+
 def put(request, key, data,
         filename=None,
         content_type=None,
@@ -234,14 +247,14 @@ def _do_remove(request, key):
     remove(request, key)
 
 
-def _do(request, do, key):
-    if do == 'get':
-        _do_get(request, key)
-    elif do == 'remove':
-        _do_remove(request, key)
-
 def execute(pagename, request):
     do = request.values.get('do')
     key = request.values.get('key')
-    _do(request, do, key)
+    valid = valid_key(key)  # validate untrusted input
+    if valid and do == 'get':
+        _do_get(request, key)
+    elif valid and do == 'remove':
+        _do_remove(request, key)
+    else:
+        request.status_code = 404

From 64e16037a60646a4d834f0203c75481b9c3fa74c Mon Sep 17 00:00:00 2001
From: Thomas Waldmann <tw@waldmann-edv.de>
Date: Mon, 26 Oct 2020 21:18:34 +0100
Subject: [PATCH] security: fix stored XSS vulnerability via SVG attachment

Fixes CVE-2020-15275.

An attacker with write permissions can upload an SVG file that contains
malicious javascript. This javascript will be executed in a user's
browser when the user is viewing that SVG file on the wiki.

Components of this fix:

A) add svg mimetype to the XSS endangered types

   SVG can contain javascript and lead to stored XSS.

   Seems like the only exception to that is when using it in an
   <img> tag as src.

B) add svg+xml to the browser supported image types

   This triggers that moin will use the <img> tag for SVGs.

   <img> does not have the SVG XSS issue.

Credits:

This vulnerability was discovered by:

Catarina Leite from the Checkmarx SCA AppSec team
---
 MoinMoin/config/__init__.py    | 2 +-
 MoinMoin/config/multiconfig.py | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/MoinMoin/config/__init__.py b/MoinMoin/config/__init__.py
index e0a4ca60..4601d27f 100644
--- a/MoinMoin/config/__init__.py
+++ b/MoinMoin/config/__init__.py
@@ -12,7 +12,7 @@
 from MoinMoin.util.chartypes import *
 
 # List of image types browser do support regulary
-browser_supported_images = ('gif', 'jpg', 'jpeg', 'png', 'bmp', 'ico', )
+browser_supported_images = ('gif', 'jpg', 'jpeg', 'png', 'bmp', 'ico', 'svg+xml')
 
 # Parser to use mimetype text
 parser_text_mimetype = ('plain', 'csv', 'rst', 'docbook', 'latex', 'tex', 'html', 'css',
diff --git a/MoinMoin/config/multiconfig.py b/MoinMoin/config/multiconfig.py
index 0f03cb50..85e628ed 100644
--- a/MoinMoin/config/multiconfig.py
+++ b/MoinMoin/config/multiconfig.py
@@ -1143,6 +1143,7 @@ def __init__(self, exprstr):
     ('mimetypes_xss_protect',
      [
        'text/html',
+       'image/svg+xml',
        'application/x-shockwave-flash',
        'application/xhtml+xml',
      ],

